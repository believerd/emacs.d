#+TITLE: Emacs Configuration
#+STARTUP: showstars content indent

* UI
** Theme and modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-dracula t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  ;(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+END_SRC

** Better defaults
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(show-paren-mode 1)
(linum-mode 1)
(global-hl-line-mode t)
(setq inhibit-startup-message t)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11" ))
(set-face-attribute 'default t :font "JetBrains Mono-11" )
#+END_SRC

* Misc
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist (quote (("." . "~/.emacs.d/autobackups"))))
(global-auto-revert-mode 1)
#+END_SRC

* Packages
** try
#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC

** pyim
#+BEGIN_SRC emacs-lisp
(use-package pyim
  :demand t
  :config
  ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
  (use-package pyim-basedict
    :ensure nil
    :config (pyim-basedict-enable))

  (setq default-input-method "pyim")

  ;; 我使用全拼
  (setq pyim-default-scheme 'quanpin)

  ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
  ;; 我自己使用的中英文动态切换规则是：
  ;; 1. 光标只有在注释里面时，才可以输入中文。
  ;; 2. 光标前是汉字字符时，才能输入中文。
  ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
;  (setq-default pyim-english-input-switch-functions
;                '(pyim-probe-dynamic-english
;                  pyim-probe-isearch-mode
;                  pyim-probe-program-mode
;                  pyim-probe-org-structure-template))

  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning
                  pyim-probe-punctuation-after-punctuation))

  ;; 开启拼音搜索功能
  (pyim-isearch-mode 1)

  ;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置
  ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
  ;; 手动安装 posframe 包。
  (setq pyim-page-tooltip 'popup)

  ;; 选词框显示5个候选词
  (setq pyim-page-length 5)

  :bind
  (("M-j" . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合
   ("C-;" . pyim-delete-word-from-personal-buffer)))
#+END_SRC

** dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

** org-roam
#+BEGIN_SRC emacs-lisp
(use-package org-roam
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "~/Sync/org")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-graph-show))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))
              (("C-c n I" . org-roam-insert-immediate))))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status))
#+END_SRC

** counsel along with ivy&swiper
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :config
  (ivy-mode 1)
  (global-set-key (kbd "C-s") 'swiper-isearch)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "<f2> j") 'counsel-set-variable)
  (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
  (global-set-key (kbd "C-c v") 'ivy-push-view)
  (global-set-key (kbd "C-c V") 'ivy-pop-view))
#+END_SrC

** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind (:map projectile-mode-map
         ("C-c p" . projectile-command-map)))
  :config
  (projectile-mode +1)
#+END_SRC

** company
#+BEGIN_SrC emacs-lisp
(use-package company
  :config
  (global-company-mode 1)
  (setq company-idle-delay 0.0))
#+END_SRC

** flycheck
#+BEGIN_SrC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+END_SRC

** nyan-mode
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :config
  (nyan-mode))
#+END_SRC

* Org-mode
#+BEGIN_SRC emacs-lisp
;(require 'org)
(setq org-directory "~/Sync/org/")
(setq org-agenda-files (list "~/Sync/org/inbox.org"))
;;TODO use relative path to org-directory.


;(setq org-agenda-files (list "./inbox.org"))



;(setq org-capture-templates
;      '(("i" "Inbox" entry  (file "inbox.org")
;         "* TODO %?\n /Entered on/ %U")))

(setq org-capture-templates
       `(("i" "Inbox" entry  (file "inbox.org")
        ,(concat "* TODO %?\n"
                 "/Entered on/ %U"))))

;(setq org-agenda-hide-tags-regexp ".")

(setq org-agenda-prefix-format
      '((agenda . " %i %-12:c%?-12t% s")
        (todo   . " ")
        (tags   . " %i %-12:c")
        (search . " %i %-12:c")))

;; Use full window for org-capture
;  (add-hook 'org-capture-mode-hook 'delete-other-windows)

(define-key global-map            (kbd "C-c c") 'org-capture)
(define-key global-map            (kbd "C-c a") 'org-agenda)

#+END_SRC

